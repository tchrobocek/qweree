@page "/apps/picc/browse"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Configuration
@using Qweree.PiccStash.Sdk
@using Qweree.WebApplication.Infrastructure.View
@using DialogService = Qweree.WebApplication.Infrastructure.View.DialogService
@attribute [Authorize]

@inject DialogService DialogService
@inject PiccClient PiccClient
@inject IJSRuntime JsRuntime
@inject IConfiguration Configuration

<div class="mb-4">
    <MudButton OnClick="OpenUploadDialogAsync">Upload piccs</MudButton>
</div>

<MudGrid>
    <MudItem xs="6">
        <MudIconButton OnClick="PrevPageAsync" Color="Color.Primary" Icon="@Icons.Material.Filled.NavigateBefore"/>
    </MudItem>
    <MudItem xs="6" Style="text-align: right">
        <MudIconButton OnClick="NextPageAsync" Color="Color.Primary" Icon="@Icons.Material.Filled.NavigateNext"/>
    </MudItem>
</MudGrid>

<MudGrid Class="mt-4">
    @foreach (var item in _piccs)
    {
        <MudItem xs="3">
            <MudCard>
                <a target="_blank" href="@GetCdnUri(item)">
                    <MudCardMedia Image="@GetCdnUri(item)" Height="200"/>
                </a>
                <MudCardContent>
                    @if (!string.IsNullOrWhiteSpace(item.Name))
                    {
                        <MudText Typo="Typo.body1">
                            @item.Name
                        </MudText>
                    }
                    <MudText Typo="Typo.body2">
                        @item.Id
                    </MudText>
                </MudCardContent>
                <MudCardActions Class="d-flex flex-row-reverse">
                    <MudTooltip Text="Delete" Placement="Placement.Bottom">
                        <MudIconButton OnClick="() => DeletePiccAsync(item)" Icon="@Icons.Material.Filled.Delete"/>
                    </MudTooltip>
                    <MudTooltip Text="Copy uri" Placement="Placement.Bottom">
                        <MudIconButton OnClick="() => CopyLinkAsync(item)" Icon="@Icons.Material.Filled.Link"/>
                    </MudTooltip>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    private const int Batch = 12;
    private int _pageIndex;
    private List<PiccDto> _piccs = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshAsync();
    }

    private async Task RefreshAsync()
    {
        var piccs = await PiccClient.PiccsPaginateAsync(_pageIndex * Batch, Batch);
        if (piccs.IsSuccessful)
        {
            _piccs = (await piccs.ReadPayloadAsync())!
                .ToList();
        }
    }

    private string GetCdnUri(PiccDto item)
    {
        return Configuration["PiccServiceUri"] + "api/v1/picc/" + item.Id;
    }

    private async Task OpenUploadDialogAsync()
    {
        await DialogService.ShowAndWaitAsync<UploadPiccDialogComponent>("Upload piccs",  new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });
        await RefreshAsync();
    }

    private async Task DeletePiccAsync(PiccDto item)
    {
        var delete = await DialogService.ConfirmAsync("Delete picc", "Do you really wish to delete picc?");

        if (!delete || item.Id == null)
            return;

        await PiccClient.PiccDeleteAsync((Guid) item.Id);
        await RefreshAsync();
    }

    private async Task CopyLinkAsync(PiccDto item)
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", GetCdnUri(item));
        }
        catch (Exception)
        {
            // ignore, couldn't copy link
        }
    }

    private async Task NextPageAsync()
    {
        _pageIndex++;
        await RefreshAsync();

        if (_piccs.Count == 0)
            await PrevPageAsync();
    }

    private async Task PrevPageAsync()
    {
        _pageIndex--;

        if (_pageIndex < 0)
            _pageIndex = 0;

        await RefreshAsync();
    }

}