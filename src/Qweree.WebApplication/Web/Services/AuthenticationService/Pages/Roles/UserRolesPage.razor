@page "/services/auth/user-roles/list"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using Qweree.Authentication.AdminSdk.Authorization
@using Qweree.Authentication.AdminSdk.Authorization.Roles
@using Qweree.WebApplication.Infrastructure.View
@using DialogService = Qweree.WebApplication.Infrastructure.View.DialogService
@inject DialogService _dialogService
@inject AuthorizationClient _authorizationClient
@inject NavigationManager _navigationManager


<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h6">User roles</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudTable Items="@_userRoles" Hover="true" Elevation="0">
            <ToolBarContent>
                <MudSpacer />
                <MudButton Size="Size.Small" Class="ma-2" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="RefreshAsync">Refresh user roles</MudButton>
                <MudButton Size="Size.Small" Class="ma-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddUserRole">Add user role</MudButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Role</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">
                    <ShortIdComponent Id="@context.Id"/>
                </MudTd>
                <MudTd DataLabel="Role">
                    @context.Label (@context.Key)
                    @if (context.IsGroup ?? false)
                    {
                        <span style="font-weight: bold;">
                            -- @context.Items?.Length <PluralityComponent Value="context.Items?.Length" Singular="role in group" Plural="roles in group" />
                        </span>
                    }
                </MudTd>
                <MudTd DataLabel="Actions" Style="text-align: right">
                    <MudLink @onclick="() => NavigateToEdit(context.Id)" Class="cursor-pointer mx-2">Edit</MudLink>
                    <MudLink @onclick="() => DeleteAsync(context)" Color="Color.Error" Class="cursor-pointer mx-2">Delete</MudLink>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudCardContent>
</MudCard>

@code {
    private readonly List<UserRoleDto> _userRoles = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshAsync();
    }

    private void AddUserRole()
    {
        _navigationManager.NavigateTo("services/auth/user-roles/add");
    }

    private void NavigateToEdit(Guid? id)
    {
        _navigationManager.NavigateTo($"services/auth/user-roles/edit/{id.ToString()}");
    }

    private async Task DeleteAsync(UserRoleDto context)
    {
        var delete = await _dialogService.ConfirmAsync($"Delete user role", $"Do you really wish to delete role {context.Key}?");

        if (!delete)
            return;

        await _authorizationClient.UserRoleDeleteAsync(context.Id ?? Guid.Empty);
        await RefreshAsync();
    }


    private async Task RefreshAsync()
    {
        _userRoles.Clear();

        var response = await _authorizationClient.UserRolesFindAsync();

        if (response.IsSuccessful)
        {
            var payload = await response.ReadPayloadAsync();
            _userRoles.AddRange(payload ?? ArraySegment<UserRoleDto>.Empty);
        }
    }
}