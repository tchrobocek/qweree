@page "/services/auth/client-roles/edit/{editId}"
@using Qweree.Authentication.AdminSdk.Authorization.Roles
@using Qweree.Authentication.AdminSdk.Authorization
@using Microsoft.AspNetCore.Authorization
@inject AuthorizationClient AuthorizationClient;
@inject ISnackbar Snackbar;
@inject NavigationManager NavigationManager;
@attribute [Authorize]

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h6">Edit client role @($"{_label} ({_key})")</MudText>
    </MudCardHeader>
    <MudCardContent>
        <ErrorsComponent Errors="_errors" />
        <MudExpansionPanels MultiExpansion="true" Square="true" DisableBorders="false" Elevation="0">
            <MudExpansionPanel Text="Role info" IsInitiallyExpanded="true" Class="mt-0" Style="margin: 0 !important;">
                <MudGrid>
                    <MudItem xs="6">
                        <MudTextField T="string" Variant="Variant.Outlined" Label="Label" @bind-Value="_label"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField T="string" Disabled Variant="Variant.Outlined" Label="Key" @bind-Value="_key"/>
                    </MudItem>
                </MudGrid>
                <MudTextField T="string" Lines="3" Variant="Variant.Outlined" Label="Description" @bind-Value="_description"/>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Group role" Class="mt-0" Style="margin: 0 !important;">
                <ClientRoleSelectComponent SelectedRoles="_groupRoles"/>
            </MudExpansionPanel>
        </MudExpansionPanels>
        <div style="text-align: right;" class="mt-4">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="EditRoleAsync">Edit role</MudButton>
        </div>
    </MudCardContent>
</MudCard>

@code {
    private readonly List<string> _errors = new();

    private readonly List<ClientRole> _groupRoles = new();
    private string _idString = Guid.NewGuid().ToString();
    private string _key = string.Empty;
    private string _label = string.Empty;
    private string _description = string.Empty;

    [Parameter]
    public string? EditId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!Guid.TryParse(EditId, out var editId))
        {
            NavigationManager.NavigateTo("/not-found");
        }

        var response = await AuthorizationClient.ClientRolesFindAsync();

        if (!response.IsSuccessful)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }

        var roles = await response.ReadPayloadAsync();
        var role = roles!.FirstOrDefault(r => r.Id == editId);

        if (role == null)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }

        _idString = role.Id?.ToString() ?? string.Empty;
        _key = role.Key ?? string.Empty;
        _label = role.Label ?? string.Empty;
        _description = role.Description ?? string.Empty;

        if (role.IsGroup ?? false)
        {
            _groupRoles.AddRange(role.Items ?? Array.Empty<ClientRole>());
        }
    }

    private async Task EditRoleAsync()
    {
        _errors.Clear();
        var input = new ClientRoleModifyInput
        {
            Description = _description,
            IsGroup = _groupRoles.Any(),
            Items = _groupRoles.Select(r => r.Id).OfType<Guid>().ToArray(),
            Label = _label
        };

        var response = await AuthorizationClient.ClientRoleModifyAsync(Guid.Parse(_idString), input);

        if (!response.IsSuccessful)
        {
            var errors = await response.ReadErrorsAsync();
            _errors.AddRange(errors.Errors?.Select(e => e.Message ?? "") ?? Array.Empty<string>());
            return;
        }

        Snackbar.Add($"Role {_label} ({_key}) was successfully modified.", Severity.Success);
        NavigationManager.NavigateTo("/services/auth/client-roles/list");
    }

}