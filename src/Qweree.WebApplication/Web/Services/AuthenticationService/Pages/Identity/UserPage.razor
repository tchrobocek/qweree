@page "/services/auth/users/{UserId}"
@attribute [Authorize]
@using Qweree.Authentication.AdminSdk.Identity
@using Qweree.Authentication.AdminSdk.Identity.Users
@using Qweree.Authentication.AdminSdk.Authorization.Roles
@using Microsoft.AspNetCore.Authorization
@using Qweree.Authentication.Sdk.Users
@using Qweree.WebApplication.Infrastructure.Extensions
@using Qweree.WebApplication.Infrastructure.View
@using DialogService = Qweree.WebApplication.Infrastructure.View.DialogService
@inject IdentityClient _identityClient
@inject NavigationManager _navigationManager
@inject DialogService _dialogService
@inject ISnackbar _snackbar

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h6">@_fullName (@_user?.Username)</MudText>
    </MudCardHeader>
    <MudCardContent>
        @if (_user != null)
        {
            <MudTabs>
                <MudTabPanel Text="Info">
                    <MudGrid Class="mt-6 pl-6 mb-4">
                        <MudItem xs="4">
                            <div style="text-align: center">
                                <MudAvatar Style="height:140px; width:140px; font-size:2rem;" Color="Color.Primary" Class="my-8">
                                    @_user.Username?.First().ToString().ToUpper()
                                </MudAvatar>
                            </div>
                        </MudItem>
                        <MudItem xs="8" Class="my-8 pl-6">
                            <MudText Typo="Typo.body2">Id: @_user.Id</MudText>
                            <MudText Typo="Typo.body2">Username: @_user.Username</MudText>
                            <MudText Typo="Typo.body2">Contact email: @_user.ContactEmail</MudText>
                            <MudText Typo="Typo.body2">Full name: @_user.GetFullName()</MudText>
                            <MudText Typo="Typo.body2">Creation time: @_user.CreatedAt</MudText>
                            <MudText Typo="Typo.body2">Last modification time: @_user.ModifiedAt</MudText>
                            <MudText Typo="Typo.body2">Properties: </MudText>
                            @foreach (var property in _user.Properties ?? Array.Empty<UserPropertyDto>())
                            {
                                <MudText class="ml-4" Typo="Typo.body2">- @property.Key: @property.Value</MudText>
                            }
                        </MudItem>
                    </MudGrid>
                    <MudExpansionPanels MultiExpansion="true" Square="true" DisableBorders="false" Elevation="0">
                        <MudExpansionPanel Disabled="@(!_user.Roles?.Any() ?? false)" Text="@($"Roles ({_user.Roles?.Length ?? 0})")" Class="mt-0" Style="margin: 0 !important;">
                            @foreach (var role in _user.Roles ?? Array.Empty<RoleDto>())
                            {
                                <MudChip Color="Color.Default">@($"{role.Label} ({role.Key})")</MudChip>
                            }
                        </MudExpansionPanel>
                        <MudExpansionPanel Disabled="@(!_effectiveRoles.Any())" Text="@($"Effective roles ({_effectiveRoles.Length})")" Class="mt-0" Style="margin: 0 !important;">
                            @foreach (var role in _effectiveRoles ?? Array.Empty<RoleDto>())
                            {
                                <MudChip Color="Color.Dark">@($"{role.Label} ({role.Key})")</MudChip>
                            }
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Delete user" Class="mt-0" Style="margin: 0 !important;">
                            <MudButton OnClick="DeleteAsync" Color="Color.Error">Delete</MudButton>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudTabPanel>
                <MudTabPanel Text="Modify" Disabled></MudTabPanel>
                <MudTabPanel Text="Activity log" Disabled></MudTabPanel>
                <MudTabPanel Text="Comments" Disabled></MudTabPanel>
                <MudTabPanel Text="Notes">
                    <div class="my-6 mx-6">
                        <NotesComponent Entity="@UserId"/>
                    </div>
                </MudTabPanel>
            </MudTabs>
        }
    </MudCardContent>
</MudCard>

@code {
    private string _fullName = string.Empty;
    private UserDto? _user;
    private RoleDto[] _effectiveRoles = new RoleDto[0];

    [Parameter]
    public string? UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!Guid.TryParse(UserId, out var id))
        {
            _navigationManager.NavigateTo("/not-found");
            return;
        }

        var userResponse = await _identityClient.UserGetAsync(id);
        var effectiveRolesResponse = await _identityClient.UserEffectiveRolesGetAsync(id);

        if (!userResponse.IsSuccessful || !effectiveRolesResponse.IsSuccessful)
        {
            _navigationManager.NavigateTo("/not-found");
        }

        _user = await userResponse.ReadPayloadAsync();
        _fullName = _user?.GetFullName() ?? string.Empty;
        _effectiveRoles = (await effectiveRolesResponse.ReadPayloadAsync())?.ToArray() ?? Array.Empty<RoleDto>();
    }

    private async Task DeleteAsync()
    {
        var isDeleting = await _dialogService.ConfirmAsync("Remove user", $"Do you really wish to delete user {_user?.Username}?");

        if (!isDeleting)
            return;

        var result = await _identityClient.UserDeleteAsync(_user?.Id ?? Guid.Empty);
        if (!result.IsSuccessful)
        {
            _snackbar.AddErrors(await result.ReadErrorsAsync());
        }
        else
        {
            _navigationManager.NavigateTo("/services/auth/users/list");
        }
    }

}