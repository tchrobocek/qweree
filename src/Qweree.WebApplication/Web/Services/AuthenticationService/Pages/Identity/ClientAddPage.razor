@page "/services/auth/clients/add"
@using Microsoft.AspNetCore.Authorization
@using Qweree.Authentication.AdminSdk.Authorization
@using Qweree.Authentication.AdminSdk.Authorization.Roles
@using Qweree.Authentication.AdminSdk.Identity
@using Qweree.Authentication.AdminSdk.Identity.Clients
@using Qweree.WebApplication.Infrastructure.Authentication
@using Qweree.WebApplication.Infrastructure.View
@using DialogService = Qweree.WebApplication.Infrastructure.View.DialogService
@attribute [Authorize]
@inject AuthorizationClient AuthorizationClient;
@inject IdentityClient IdentityClient;
@inject NavigationManager NavigationManager;
@inject ClaimsPrincipalStorage Session
@inject DialogService DialogService
@inject ISnackbar Snackbar

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h6">Add client</MudText>
    </MudCardHeader>
    <MudCardContent>
        <ErrorsComponent Errors="_errors" />
        <MudExpansionPanels MultiExpansion="true" Square="true" DisableBorders="false" Elevation="0">
            <MudExpansionPanel Text="Client info" IsInitiallyExpanded="true" Class="mt-0" Style="margin: 0 !important;">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_clientId" T="string" Label="Client id" Variant="Variant.Outlined"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="_applicationName" T="string" Label="Application name" Variant="Variant.Outlined"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="_origin" T="string" Label="Origin" Variant="Variant.Outlined"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_ownerId" T="string" Label="Owner id" Variant="Variant.Outlined"/>
                    </MudItem>
                </MudGrid>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Client roles" Class="mt-0" Style="margin: 0 !important;">
                <ClientRoleSelectComponent ExcludeGroupRoles="false" SelectedRoles="_clientRoles"/>
            </MudExpansionPanel>
            <MudExpansionPanel Text="User roles" Class="mt-0" Style="margin: 0 !important;">
                <UserRoleSelectComponent ExcludeGroupRoles="false" SelectedRoles="_userRoles"/>
            </MudExpansionPanel>
        </MudExpansionPanels>
        <div style="text-align: right;" class="mt-4">
            <MudButton Class="my-6" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="CreateAsync">Create</MudButton>
        </div>
    </MudCardContent>
</MudCard>

@code {
    private readonly List<ClientRoleDto> _clientRoles = new();
    private readonly List<UserRoleDto> _userRoles = new();
    private readonly List<string> _errors = new();

    private string _clientId = string.Empty;
    private string _ownerId = string.Empty;
    private string _applicationName = string.Empty;
    private string _origin = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var rolesResponse = await AuthorizationClient.ClientRolesFindAsync();

        if (!rolesResponse.IsSuccessful)
            return;

        var identity = await Session.GetIdentityAsync();

        if (identity != null)
            _ownerId = identity.User?.Id?.ToString()!;
    }

    public async Task CreateAsync()
    {
        _errors.Clear();

        var clientRoles = _clientRoles.Select(r => r.Id ?? Guid.Empty);
        var userRoles = _userRoles.Select(r => r.Id ?? Guid.Empty);

        var input = new ClientCreateInputDto
        {
            Origin = _origin,
            ApplicationName = _applicationName,
            ClientId = _clientId,
            ClientRoles = clientRoles.ToArray(),
            OwnerId = Guid.Parse(_ownerId),
            UserRoles = userRoles.ToArray()
        };

        var response = await IdentityClient.ClientCreateAsync(input);

        if (!response.IsSuccessful)
        {
            var errors = await response.ReadErrorsAsync();
            _errors.AddRange(errors.Errors?.Select(e => e.Message ?? "") ?? Array.Empty<string>());

            if (!_errors.Any())
                _errors.Add(response.StatusCode.ToString());

            return;
        }

        var client = (await response.ReadPayloadAsync())!;
        var secret = client.ClientSecret;
        await DialogService.AlertAsync("Client secret", secret ?? "Error: secret is empty.");
        NavigationManager.NavigateTo("/services/auth/clients/list");
        Snackbar.Add($"Client {_applicationName} ({_clientId}) was successfully created.", Severity.Success);
    }
}