@page "/services/auth/clients/{ClientId}"
@attribute [Authorize]
@using Qweree.Authentication.AdminSdk.Identity
@using Qweree.Authentication.AdminSdk.Identity.Clients
@using Qweree.Authentication.AdminSdk.Authorization.Roles
@using Microsoft.AspNetCore.Authorization
@using Qweree.WebApplication.Infrastructure.View
@using DialogService = Qweree.WebApplication.Infrastructure.View.DialogService
@inject IdentityClient IdentityClient
@inject NavigationManager NavigationManager
@inject DialogService DialogService

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h6">@_client?.ApplicationName (@_client?.ClientId)</MudText>
    </MudCardHeader>
    <MudCardContent>
        @if (_client is not null)
        {
            <MudTabs>
                <MudTabPanel Text="Info">
                    <div class="mt-6 ml-6 mb-4">
                        <MudText Typo="Typo.body1">Id: @_client.Id</MudText>
                        <MudText Typo="Typo.body1">Client id: @_client.ClientId</MudText>
                        <MudText Typo="Typo.body1">Application name: @_client.ApplicationName</MudText>
                        <MudText Typo="Typo.body1">Origin: @_client.Origin</MudText>
                        <MudText Typo="Typo.body1">Owner: @_client.Owner?.Username (<MudLink Color="Color.Default" Underline="Underline.Always" Href="@("/services/auth/users/" + _client.Owner?.Id)">@_client.Owner?.Id</MudLink>)</MudText>
                        <MudText Typo="Typo.body1">Creation time: @_client.CreatedAt</MudText>
                        <MudText Typo="Typo.body1">Last modification time: @_client.ModifiedAt</MudText>
                    </div>

                    <MudExpansionPanels MultiExpansion="true" Square="true" DisableBorders="false" Elevation="0">
                        <MudExpansionPanel Disabled="@(!_client.Roles?.Any() ?? false)" Text="@($"Roles ({_client.Roles?.Length ?? 0})")" Class="mt-0" Style="margin: 0 !important;">
                            @foreach (var role in _client.Roles ?? Array.Empty<Role>())
                            {
                                <MudChip Color="Color.Default">@($"{role.Label} ({role.Key})")</MudChip>
                            }
                        </MudExpansionPanel>
                        <MudExpansionPanel Disabled="@(!_effectiveRoles.Any())" Text="@($"Effective roles ({_effectiveRoles.Length})")" Class="mt-0" Style="margin: 0 !important;">
                            @foreach (var role in _effectiveRoles)
                            {
                                <MudChip Color="Color.Dark">@($"{role.Label} ({role.Key})")</MudChip>
                            }
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Delete client" Class="mt-0" Style="margin: 0 !important;">
                            <MudButton OnClick="DeleteAsync" Color="Color.Error">Delete</MudButton>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudTabPanel>
                <MudTabPanel Text="Modify" Disabled></MudTabPanel>
                <MudTabPanel Text="Activity log" Disabled></MudTabPanel>
                <MudTabPanel Text="Comments" Disabled></MudTabPanel>
                <MudTabPanel Text="Notes">
                    <div class="my-6 mx-6">
                        <NotesComponent Entity="@ClientId"/>
                    </div>
                </MudTabPanel>
            </MudTabs>
        }
    </MudCardContent>
</MudCard>

@code {
    private Client? _client;
    private Role[] _effectiveRoles = Array.Empty<Role>();

    [Parameter]
    public string? ClientId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!Guid.TryParse(ClientId, out var id))
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }

        var clientResponse = await IdentityClient.ClientGetAsync(id);
        var clientEffectiveRolesResponse = await IdentityClient.ClientEffectiveRolesGetAsync(id);

        if (!clientResponse.IsSuccessful || !clientEffectiveRolesResponse.IsSuccessful)
        {
            NavigationManager.NavigateTo("/not-found");
        }

        _client = await clientResponse.ReadPayloadAsync();
        var roles = await clientEffectiveRolesResponse.ReadPayloadAsync();
        _effectiveRoles = roles?.Roles ?? Array.Empty<Role>();
    }

    private async Task DeleteAsync()
    {
        var isDeleting = await DialogService.ConfirmAsync("Remove client", $"Do you really wish to delete client {_client?.ClientId}?");

        if (isDeleting)
        {
            var response = await IdentityClient.ClientDeleteAsync(_client?.Id ?? Guid.Empty);
            response.EnsureSuccessStatusCode();

            if (response.IsSuccessful)
                NavigationManager.NavigateTo("/services/auth/clients/list");
        }
    }

}