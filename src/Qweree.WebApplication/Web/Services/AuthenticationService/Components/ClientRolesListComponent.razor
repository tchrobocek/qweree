@using Qweree.Authentication.AdminSdk.Authorization
@using Qweree.Authentication.AdminSdk.Authorization.Roles
@inject IDialogService _dialogService
@inject AuthorizationClient _authorizationClient

<MudTable Items="@_clientRoles" Hover="true" Class="pa-4">
    <ToolBarContent>
        <MudSpacer />
        <MudButton Class="ma-2" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="RefreshAsync">Refresh client roles</MudButton>
        <MudButton Class="ma-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddClientRole">Add client role</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Role</MudTh>
        <MudTh>Group role</MudTh>
        <MudTh>Modified at</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id"><ShortIdComponent Id="@context.Id" /></MudTd>
        <MudTd DataLabel="Role">@context.Label "@context.Key"</MudTd>
        <MudTd DataLabel="Is group role?">
            @context.IsGroup
            @if (context.IsGroup ?? false)
            {
                @($"({context.Items?.Length})")
            }
        </MudTd>
        <MudTd DataLabel="Modified at"><MudTooltip Text="@context.CreatedAt.ToString()">@context.ModifiedAt</MudTooltip></MudTd>
        <MudTd DataLabel="Actions" Style="text-align: right">
            <MudIconButton Title="Edit" OnClick="() => NavigateToEdit(context.Id)" Color="Color.Primary" Icon="@Icons.Material.Filled.EditNote"></MudIconButton>
            <MudIconButton Title="Delete" OnClick="() => DeleteAsync(context)" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private readonly List<ClientRoleDto> _clientRoles = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshAsync();
    }

    private void AddClientRole()
    {
    }

    private void NavigateToEdit(Guid? id)
    {
    }

    private async Task DeleteAsync(ClientRoleDto context)
    {
        var contextId = context.Id;
        var result = _dialogService.Show<ConfirmDialogComponent>("Confirm", new DialogParameters{{"text", $"Do you really want to delete role ({context.Key})?"}});
        var delete = (bool)((await result.Result).Data ?? false);

        if (!delete || contextId == null)
            return;

        await _authorizationClient.ClientRoleDeleteAsync((Guid) contextId);
        await RefreshAsync();
    }


    private async Task RefreshAsync()
    {
        _clientRoles.Clear();

        var response = await _authorizationClient.ClientRolesFindAsync();

        if (response.IsSuccessful)
        {
            var payload = await response.ReadPayloadAsync();
            _clientRoles.AddRange(payload ?? ArraySegment<ClientRoleDto>.Empty);
        }
    }

}