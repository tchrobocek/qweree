@using Qweree.Authentication.AdminSdk.Authorization
@using Qweree.Authentication.AdminSdk.Authorization.Roles
@using Qweree.Authentication.AdminSdk
@inject AdminSdkClient AdminClient;

<div>
    <MudAutocomplete T="Role" Label="Search role" @bind-Text="_searchText"
                     SearchFunc="@Search" ToStringFunc="@(r => $"{r?.Label}{(r is not null ? $" ({r.Key})" : "")}")"
                     ValueChanged="SelectValueChanged"
                     Value="_selectValue"
                     Disabled="Disabled"
                     @onfocus="OnFocus">
    </MudAutocomplete>
    <MudButton Disabled="Disabled" OnClick="SelectAll" Size="Size.Small">Add all roles</MudButton>
    <MudButton Disabled="Disabled" OnClick="ClearRoles" Size="Size.Small">Clear</MudButton>
</div>
<div class="mt-6">
    @foreach (var selectedRole in SelectedRoles)
    {
        <MudChip Color="Color.Default" OnClose="() => RoleRemoved(selectedRole)">@($"{selectedRole.Label} ({selectedRole.Key})")</MudChip>
        @foreach (var effectiveRole in selectedRole.EffectiveRoles?.Where(r => r.Id != selectedRole.Id) ?? Array.Empty<Role>())
        {
            <MudChip Color="Color.Dark">@($"{effectiveRole.Label} ({effectiveRole.Key})")</MudChip>
        }
    }
</div>

@code {
    private readonly List<Role> _roles = new();
    private Role? _selectValue;
    private string _searchText = string.Empty;

    [Parameter]
    public List<Role> SelectedRoles { get; set; } = new();

    [Parameter]
    public bool ExcludeGroupRoles { get; set; } = true;

    [Parameter]
    public bool Disabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await AdminClient.RolesFindAsync();

        if (!response.IsSuccessful)
            return;

        var roles = await response.ReadPayloadAsync() ?? Array.Empty<Role>();
        if (ExcludeGroupRoles)
            roles = roles.Where(r => !(r.IsGroup ?? true));

        _roles.AddRange(roles.OrderBy(r => r.Key));
    }

    private Task<IEnumerable<Role>> Search(string? arg)
    {
        var roles = _roles.Where(r => SearchRole(r, arg));
        return Task.FromResult(roles);
    }

    private bool SearchRole(Role role, string? searchArg)
    {
        if (SelectedRoles.Contains(role))
            return false;

        return (role.Label?.ToLower() ?? string.Empty).IndexOf(searchArg ?? string.Empty, StringComparison.Ordinal) >= 0 ||
               (role.Key?.ToLower() ?? string.Empty).IndexOf(searchArg ?? string.Empty, StringComparison.Ordinal) >= 0;
    }

    private void SelectValueChanged(Role role)
    {
        SelectedRoles.Add(role);
        _selectValue = null;
    }

    private void RoleRemoved(Role selectedRole)
    {
        SelectedRoles.Remove(selectedRole);
    }

    private void OnFocus()
    {
        _selectValue = null;
    }

    private void ClearRoles()
    {
        SelectedRoles.Clear();
    }

    private void SelectAll()
    {
        SelectedRoles.Clear();
        SelectedRoles.AddRange(_roles);
    }

}