@using Qweree.Authentication.AdminSdk.Authorization
@using Qweree.Authentication.AdminSdk.Authorization.Roles
@inject AuthorizationClient _authorizationClient;

<div>
    <MudAutocomplete T="ClientRoleDto" Label="Search role" @bind-Text="_searchText"
                     SearchFunc="@Search" ToStringFunc="@(r => $"{r?.Label} ({r?.Key})")"
                     ValueChanged="SelectValueChanged"
                     Value="_selectValue"
                     @onfocus="OnFocus">
    </MudAutocomplete>
    <MudButton OnClick="SelectAll" Size="Size.Small">Add all roles</MudButton>
    <MudButton OnClick="ClearRoles" Size="Size.Small">Clear</MudButton>
</div>
<div class="mt-6">
    @foreach (var selectedRole in SelectedRoles)
    {
        <MudChip Color="Color.Default" OnClose="() => RoleRemoved(selectedRole)">@($"{selectedRole.Label} ({selectedRole.Key})")</MudChip>
        @foreach (var effectiveRole in selectedRole.EffectiveRoles?.Where(r => r.Id != selectedRole.Id) ?? Array.Empty<RoleDto>())
        {
            <MudChip Color="Color.Dark">@($"{effectiveRole.Label} ({effectiveRole.Key})")</MudChip>
        }
    }
</div>

@code {
    private readonly List<ClientRoleDto> _clientRoles = new();
    private ClientRoleDto? _selectValue;
    private string _searchText = string.Empty;

    [Parameter]
    public List<ClientRoleDto> SelectedRoles { get; set; } = new();

    [Parameter]
    public bool ExcludeGroupRoles { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        var response = await _authorizationClient.ClientRolesFindAsync();

        if (!response.IsSuccessful)
            return;

        var roles = await response.ReadPayloadAsync() ?? Array.Empty<ClientRoleDto>();

        if (ExcludeGroupRoles)
            roles = roles.Where(r => !(r.IsGroup ?? true));

        _clientRoles.AddRange(roles.OrderBy(r => r.Key));
    }

    private Task<IEnumerable<ClientRoleDto>> Search(string? arg)
    {
        var roles = _clientRoles.Where(r => SearchRole(r, arg));
        return Task.FromResult(roles);
    }

    private bool SearchRole(ClientRoleDto role, string? searchArg)
    {
        if (SelectedRoles.Contains(role))
            return false;

        return (role.Label?.ToLower() ?? string.Empty).IndexOf(searchArg ?? string.Empty, StringComparison.Ordinal) >= 0 ||
               (role.Key?.ToLower() ?? string.Empty).IndexOf(searchArg ?? string.Empty, StringComparison.Ordinal) >= 0;
    }

    private void SelectValueChanged(ClientRoleDto role)
    {
        SelectedRoles.Add(role);
        _selectValue = null;
    }

    private void RoleRemoved(ClientRoleDto selectedRole)
    {
        SelectedRoles.Remove(selectedRole);
    }

    private void OnFocus()
    {
        _selectValue = null;
    }

    private void ClearRoles()
    {
        SelectedRoles.Clear();
    }

    private void SelectAll()
    {
        SelectedRoles.Clear();
        SelectedRoles.AddRange(_clientRoles);
    }

}