@page "/services/cdn/overview"
@using Qweree.Cdn.Sdk.System
@using Qweree.WebApplication.Infrastructure.View.BinarySize
@inject StatsClient _statsClient

<MudCard Elevation="1" Class="pa-4">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Overview</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudChart InputData="_data.Values.ToArray()"  InputLabels="_data.Keys.ToArray()" LegendPosition="Position.Left" ChartType="ChartType.Pie" Width="300" Height="300"/>
    </MudCardContent>
</MudCard>

@code {
    private readonly Dictionary<string, double> _data = new();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var statsResponse = await _statsClient.GetStatsAsync();

        if (statsResponse.IsSuccessful)
        {
            var stats = await statsResponse.ReadPayloadAsync();
            var size = BinaryUnit.GetUserSize(new BinarySize(stats!.DiskSpaceAvailable ?? 0, BinaryUnit.Byte));
            _data[$"Available space - {size.Value.ToString(BinaryUnit.ValueFormat)} {size.Unit.ShortName}"] = stats.DiskSpaceAvailable ?? 0d;

            foreach (var mediaType in stats.MediaTypes)
            {
                size = BinaryUnit.GetUserSize(new BinarySize(mediaType.UsedSpace ?? 0, BinaryUnit.Byte));
                var label = $"{mediaType.MediaType} ({mediaType.Count}) - {size.Value.ToString(BinaryUnit.ValueFormat)} {size.Unit.ShortName}";
                _data[label] = mediaType.UsedSpace ?? 0d;
            }
        }
    }

}