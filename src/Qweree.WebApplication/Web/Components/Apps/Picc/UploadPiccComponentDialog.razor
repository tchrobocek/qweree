@using Qweree.WebApplication.Infrastructure.PiccStash
@inject PiccClient _piccClient

<MudDialog>
    <DialogContent>
        <style>
            .drag-drop-zone {
                display: flex;align-items: center;justify-content: center;transition: all .4s;min-height: 400px;
            }
            .drag-drop-input {
                position: absolute;width: 100%;height: 90%;opacity: 0;cursor:pointer;
                z-index:2;
            }
            .drag-enter {
                box-shadow: var(--mud-elevation-10);
            }
            .list{
                padding:2em;min-width:100%;
            }
        </style>

        <MudPaper @ondragenter="@(()=>_dragEnterStyle="drag-enter")"
                  @ondragleave="@(()=>_dragEnterStyle=null)"
                  @ondragend="@(()=>_dragEnterStyle=null)"
                  Class=@("drag-drop-zone "+ _dragEnterStyle)>

            <InputFile OnChange="OnInputFileChanged" multiple  class="drag-drop-input" />

            @if (_files.Count == 0)
            {
                <MudText Typo="Typo.body2">Drag and drop files here or click</MudText>
            }else
            {
                <MudList Style="padding:2em;width:100%;" Dense="true" >
                    @foreach (var file in _files)
                    {
                        <MudListItem @key="@file.Name" >
                           <MudChip Color="Color.Dark"
                                    Style="width:60px; overflow:hidden;"
                                    Text="@(file.Name.Split(".").Last())" />
                           @file
                        </MudListItem>}
                </MudList>
            }
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SubmitAsync">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    IReadOnlyList<IBrowserFile> _files = new List<IBrowserFile>();
    string? _dragEnterStyle;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = null!;

    private async Task SubmitAsync()
    {
        await UploadAsync();
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel()
    {
        _files = new List<IBrowserFile>();
        MudDialog.Cancel();
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        _files = e.GetMultipleFiles();
    }

    private async Task UploadAsync()
    {
        foreach (var file in _files)
        {
            await using var stream = file.OpenReadStream(32 * 1000 * 1000);
            await _piccClient.PiccUploadAsync(stream, file.ContentType);
        }
    }
}