@using Qweree.WebApplication.Infrastructure.Notes
@using Qweree.WebApplication.Infrastructure.Browser
@inject NoteService NoteService

@foreach (var note in _notes)
{
    <div class="pl-4 my-2">
        <div>
            <MudLink @onclick="() => DeleteAsync(note)" Color="Color.Error" Class="cursor-pointer mx-2">X</MudLink>
            @note.CreatedAt: @note.Text
        </div>
    </div>
    <MudDivider />
}
<div>
    <MudInput @onkeyup="OnInputUpAsync" @bind-Value="_addNoteInput" Style="width: 100%"  T="string" Placeholder="Add new note" Variant="Variant.Filled" FullWidth="true" />
    <MudButton Color="Color.Primary" Variant="Variant.Text" OnClick="AddNoteAsync">Add note</MudButton>

    @if (ViewDisclaimer)
    {
        <MudText Typo="Typo.body2">* Only you can see these notes.</MudText>
    }
</div>

@code {
    private readonly List<NoteDto> _notes = new();
    private string _addNoteInput = string.Empty;

    [Parameter]
    public string? Entity { get; set; }

    [Parameter]
    public bool ViewDisclaimer { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await RefreshNotesAsync();
    }

    private async Task RefreshNotesAsync()
    {
        _notes.Clear();
        var collection = await NoteService.GetMyNotesAsync(Entity!);
        _notes.AddRange(collection.Notes ?? Array.Empty<NoteDto>());
    }

    private async Task AddNoteAsync()
    {
        if (string.IsNullOrEmpty(_addNoteInput))
            return;

        var newNote = new NoteDto
        {
            Id = Guid.NewGuid(),
            Text = _addNoteInput,
            CreatedAt = DateTime.UtcNow
        };
        _notes.Add(newNote);

        var success = await NoteService.SetMyNotesAsync(Entity!, _notes);

        if (success)
            _addNoteInput = string.Empty;
    }

    private async Task DeleteAsync(NoteDto note)
    {
        _notes.Remove(note);
        await NoteService.SetMyNotesAsync(Entity!, _notes);
    }

    private async Task OnInputUpAsync(KeyboardEventArgs e)
    {
        if (e.IsEnter())
            await AddNoteAsync();
    }

}