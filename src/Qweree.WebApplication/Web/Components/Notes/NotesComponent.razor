@using Qweree.WebApplication.Infrastructure.Notes
@inject NoteService _noteService

<MudExpansionPanels Class="mt-6" MultiExpansion="true" Square="true" DisableBorders="true" Elevation="0">
    <MudExpansionPanel IsInitiallyExpanded="false" Text="Add note" Class="mt-0" Style="margin: 0 !important;">
        <MudTextField T="string" @bind-Value="_addNoteInput" Variant="Variant.Outlined" FullWidth="true" Label="Note" Lines="5"/>
        <div class="mt-2" style="text-align: right">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddNoteAsync">Add note</MudButton>
        </div>
    </MudExpansionPanel>
</MudExpansionPanels>

<div class="my-6 mx-6">
    @foreach (var note in _notes)
    {
        <div class="pl-4 my-2">
            <div class="note">
                <MudLink @onclick="() => DeleteAsync(note)" Color="Color.Error" Class="cursor-pointer mx-2">X</MudLink>
                @note.CreatedAt: @note.Text
            </div>
        </div>

        <MudDivider />
    }
    @if (_notes.Count == 0)
    {
        <div>
           No notes
        </div>
    }
</div>

@code {
    private readonly List<NoteDto> _notes = new();
    private string _addNoteInput = string.Empty;

    [Parameter]
    public string? Entity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshNotesAsync();
    }

    private async Task RefreshNotesAsync()
    {
        _notes.Clear();
        var collection = await _noteService.GetMyNotesAsync(Entity!);
        _notes.AddRange(collection.Notes ?? Array.Empty<NoteDto>());
    }

    private async Task AddNoteAsync()
    {
        var newNote = new NoteDto
        {
            Id = Guid.NewGuid(),
            Text = _addNoteInput,
            CreatedAt = DateTime.UtcNow
        };
        _notes.Add(newNote);

        var success = await _noteService.SetMyNotesAsync(Entity!, _notes);

        if (success)
            _addNoteInput = string.Empty;
    }

    private async Task DeleteAsync(NoteDto note)
    {
        _notes.Remove(note);
        await _noteService.SetMyNotesAsync(Entity!, _notes);
    }

}