@page "/claims"
@using Qweree.WebApplication.Infrastructure.Authentication
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@inject ClaimsPrincipalStorage _storage
@inject AuthenticationService _authenticationService
@inject NavigationManager _navigationManager
@attribute [Authorize]

<h3>ClaimsPrincipal Data</h3>

@if (_user != null && _claimsPrincipal != null)
{
    <ul>
        <li>id: @_user.Id</li>
        <li>username: @_user.Username</li>
        <li>email: @_user.Email</li>
        <li>full name: @_user.FullName</li>
        <li>roles: @string.Join(", ", _user.Roles)</li>
    </ul>
    <ul>
        @foreach (var claim in _claimsPrincipal.Claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
    <ul>
        <li>authenticated: @_claimsPrincipal.Identity?.IsAuthenticated</li>
    </ul>

    <button class="btn btn-primary" @onclick="LogoutAsync">Logout</button>
}
else
{
    <p>User not authenticated</p>
}

@code {
    private User? _user;
    private ClaimsPrincipal? _claimsPrincipal;

    protected override async Task OnInitializedAsync()
    {
        _user = await _storage.GetUserAsync();
        _claimsPrincipal = await _storage.GetClaimsPrincipalAsync();
    }

    private async Task LogoutAsync()
    {
        await _authenticationService.LogoutAsync();
        _navigationManager.NavigateTo("/", true);
    }

}