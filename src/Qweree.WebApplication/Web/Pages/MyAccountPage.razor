@page "/my-account"
@using Microsoft.AspNetCore.Authorization
@using Qweree.Authentication.Sdk.Account
@using System.Net
@using System.Text.Json
@using System.Text.Json.Serialization
@using Qweree.Authentication.Sdk.Account.MyAccount
@using Qweree.Authentication.Sdk.Session
@using Qweree.Gateway.Sdk
@using Qweree.WebApplication.Infrastructure.Extensions
@using Qweree.WebApplication.Infrastructure.View

@inject MyAccountClient MyAccountClient
@inject AuthenticationClient AuthenticationClient
@inject ISnackbar Snackbar

@attribute [Authorize]

@if (_identity is not null)
{
    <MudText Typo="Typo.h4">My Account</MudText>

    <MudGrid Class="mt-8" Spacing="5">
        <MudItem xs="4">
            <MudPaper Class="pa-4">
                <div style="text-align: center">
                    <MudAvatar Style="height:140px; width:140px; font-size:2rem;" Color="Color.Primary" Class="ma-2 my-8">
                        @_identity!.User!.Username!.First().ToString().ToUpper()
                    </MudAvatar>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="8">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-8">
                <MudTabPanel Text="My Profile">
                    @if (_identity.User is not null)
                    {
                        <MudText Typo="Typo.body1">Username: @_identity.User.Username</MudText>
                        <MudText Typo="Typo.body1">Contact email: @_identity.Email</MudText>
                        <MudText Typo="Typo.body1">Full name: @_identity.User.GetFullName()</MudText>
                    }
                </MudTabPanel>
                <MudTabPanel Text="Active sessions">
                    <MudTable Elevation="0" Items="_sessions">
                        <RowTemplate>
                            <MudTd Class="pa-1" DataLabel="Id">
                                <ShortIdComponent Id="@context.Id"/>
                            </MudTd>
                            <MudTd Class="pa-1" DataLabel="Device">@context.UserAgent?.Brand @context.UserAgent?.OperationSystem?.Name (@context.UserAgent?.OperationSystem?.Version)</MudTd>
                            @if (context.UserAgent?.Client is BotAuthClientInfo bot)
                            {
                                <MudTd Class="pa-1" DataLabel="Browser">@bot.Name</MudTd>
                            }
                            @if (context.UserAgent?.Client is BrowserAuthClientInfo browser)
                            {
                                <MudTd Class="pa-1" DataLabel="Browser">@browser.Name (@browser.Version)</MudTd>
                            }
                            <MudTd Class="pa-1" DataLabel="ExpiresAt">@context.ExpiresAt</MudTd>

                            <MudTd Class="pa-1" DataLabel="Actions"><MudLink @onclick="async () => await RevokeAsync(context)" Color="Color.Error" Class="cursor-pointer mx-2">revoke</MudLink></MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
                <MudTabPanel Text="Change password">
                    <ErrorsComponent Errors="_errors"/>
                    <PasswordFieldComponent @bind-Value="_oldPassword" Label="Old password" Variant="Variant.Outlined" Class="my-6"></PasswordFieldComponent>
                    <MudGrid>
                        <MudItem xs="6">
                            <PasswordFieldComponent @bind-Value="_newPassword" Label="New password" Variant="Variant.Outlined" Class="my-6"></PasswordFieldComponent>
                        </MudItem>
                        <MudItem xs="6">
                            <PasswordFieldComponent @bind-Value="_newPassword2" Label="Repeat new password" Variant="Variant.Outlined" Class="my-6"></PasswordFieldComponent>
                        </MudItem>
                    </MudGrid>
                    <MudButton OnClick="ChangePasswordAsync" Class="my-6" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large">Change password</MudButton>
                </MudTabPanel>
            </MudTabs>
        </MudItem>
    </MudGrid>
}

@code {
    private Identity? _identity;
    private MyAccountSessionInfo[]? _sessions;

    private string _oldPassword = string.Empty;
    private string _newPassword = string.Empty;
    private string _newPassword2 = string.Empty;

    private readonly List<string> _errors = new();

    protected override async Task OnInitializedAsync()
    {
        var id = _identity?.User?.Id;

        if (id is not null)
        {
            var identity = await MyAccountClient.MyProfileGetAsync();
            if (identity.IsSuccessful)
                _identity = IdentityMapper.ToIdentity((await identity.ReadPayloadAsync())!);

            await LoadSessionsAsync();
        }
    }

    private async Task LoadSessionsAsync()
    {
        var sessionsResponse = await MyAccountClient.MySessionsGetAsync();
        if (sessionsResponse.IsSuccessful)
            _sessions = await sessionsResponse.ReadPayloadAsync(new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                PropertyNameCaseInsensitive = true,
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault,
                Converters = { new ClientInfoConverter() }
            });
    }

    private async Task ChangePasswordAsync()
    {
        var newPassword = _newPassword;
        var newPassword2 = _newPassword2;
        var oldPassword = _oldPassword;

        _newPassword = string.Empty;
        _newPassword2 = string.Empty;
        _oldPassword = string.Empty;

        _errors.Clear();

        if (newPassword != newPassword2)
        {
            _errors.Add("Passwords do not match.");
            return;
        }

        var response = await MyAccountClient.ChangeMyPasswordAsync(new ChangeMyPasswordInput
        {
            OldPassword = oldPassword,
            NewPassword = newPassword
        });

        if (!response.IsSuccessful)
        {
            var errors = await response.ReadErrorsAsync();
            switch (response.StatusCode)
            {
                case HttpStatusCode.Unauthorized:
                    _errors.Add("You are not authorized.");
                    break;
                default:
                    _errors.AddRange(errors.Errors?.Select(e => e.Message ?? "") ?? Array.Empty<string>());

                    if (!_errors.Any())
                        _errors.Add(response.StatusCode.ToString());
                    break;
            }

            return;
        }

        Snackbar.Add("Password changed.", Severity.Success);
    }

    private async Task RevokeAsync(MyAccountSessionInfo myAccountSession)
    {
        var response = await AuthenticationClient.RevokeSessionAsync((Guid)myAccountSession.Id!);
        if (response.IsSuccessful)
        {
            Snackbar.Add("Session revoked.", Severity.Success);
            await LoadSessionsAsync();
        }
        else
        {
            var errors = await response.ReadErrorsAsync();
            Snackbar.AddErrors(errors);
        }
    }

}