@page "/my-account"
@using Microsoft.AspNetCore.Authorization
@using Qweree.Authentication.Sdk.Account
@using System.Net
@using Qweree.Authentication.Sdk.Session
@using Qweree.WebApplication.Infrastructure.Extensions
@using ClaimsPrincipalStorage = Qweree.WebApplication.Infrastructure.Authentication.ClaimsPrincipalStorage
@inject ClaimsPrincipalStorage Storage
@inject MyAccountClient MyAccountClient
@inject ISnackbar Snackbar
@attribute [Authorize]

@if (_identity != null)
{
    <MudText Typo="Typo.h4">My Account</MudText>

    <MudGrid Class="mt-8" Spacing="5">
        <MudItem xs="4">
            <MudPaper Class="pa-4">
                <div style="text-align: center">
                    <MudAvatar Style="height:140px; width:140px; font-size:2rem;" Color="Color.Primary" Class="ma-2 my-8">
                        @_identity!.User!.Username!.First().ToString().ToUpper()
                    </MudAvatar>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="8">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-8">
                <MudTabPanel Text="My Profile">
                    @if (_user != null)
                    {
                        <MudText Typo="Typo.body1">Username: @_user.Username</MudText>
                        <MudText Typo="Typo.body1">Contact email: @_user.ContactEmail</MudText>
                        <MudText Typo="Typo.body1">Full name: @_user.GetFullName()</MudText>
                    }
                </MudTabPanel>
                <MudTabPanel Text="Session info">
                    <MudText Class="ml-4" Typo="Typo.body1">Client</MudText>
                    <MudText Class="ml-4" Typo="Typo.body2">Id: @_identity?.Client!.Id</MudText>
                    <MudText Class="ml-4" Typo="Typo.body2">Client id: @_identity?.Client!.ClientId</MudText>
                    <MudText Class="ml-4" Typo="Typo.body2">Application name: @_identity?.Client!.ApplicationName</MudText>
                    <MudText Class="mt-4 ml-4" Typo="Typo.body1">User</MudText>
                    <MudText Class="ml-4" Typo="Typo.body2">Id: @_identity?.User!.Id</MudText>
                    <MudText Class="ml-4" Typo="Typo.body2">Username: @_identity.User!.Username</MudText>
                    <MudText Class="ml-4" Typo="Typo.body2">Email: @_identity.Email</MudText>
                    <MudText Class="ml-4" Typo="Typo.body2">Properties:</MudText>
                    @foreach (var property in _identity.User?.Properties!)
                    {
                        <MudText Class="ml-6" Typo="Typo.body2">@property.Key: @property.Value</MudText>
                    }
                    <MudText Class="ma-4" Typo="Typo.body2">Roles: @string.Join(", ", _identity?.Roles ?? Array.Empty<string>())</MudText>
                </MudTabPanel>
                <MudTabPanel Text="Active devices">
                    <MudDivider/>
                    @foreach (var myDevice in _myDevices)
                    {
                        <MudGrid Class="mb-2 mt-2">
                            <MudItem xs="3">
                                <div class="align-center ma-4">
                                    @if (myDevice.Device == "desktop")
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.DesktopMac" Style="font-size: 3rem;"/>
                                    }
                                    @if (myDevice.Device == "mobile")
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Phone" Style="font-size: 3rem;"/>
                                    }
                                    @if (myDevice.Device == "tv")
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Tv" Style="font-size: 3rem;"/>
                                    }
                                    @if (myDevice.Device == "tablet")
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Tablet" Style="font-size: 3rem;"/>
                                    }
                                </div>
                                <MudText Typo="Typo.body2">Device: @myDevice.Device</MudText>
                                <MudText Typo="Typo.body2">Brand: @myDevice.Brand</MudText>
                                <MudText Typo="Typo.body2">Model: @myDevice.Model</MudText>
                                <MudText Typo="Typo.body2">Issued at: @myDevice.IssuedAt</MudText>
                                <MudText Typo="Typo.body2">Expires at: @myDevice.ExpiresAt</MudText>
                            </MudItem>
                            <MudItem xs="4">
                                @foreach (var item in myDevice.Client?.Split(';') ?? Array.Empty<string>())
                                {
                                    <MudText Typo="Typo.body2">@item</MudText>
                                }
                            </MudItem>
                            <MudItem xs="5">
                                @foreach (var item in myDevice.Os?.Split(';') ?? Array.Empty<string>())
                                {
                                    <MudText Typo="Typo.body2">@item</MudText>
                                }
                            </MudItem>
                        </MudGrid>
                        <MudDivider/>
                    }
                </MudTabPanel>
                <MudTabPanel Text="Change password">
                    <ErrorsComponent Errors="_errors"/>
                    <PasswordFieldComponent @bind-Value="_oldPassword" Label="Old password" Variant="Variant.Outlined" Class="my-6"></PasswordFieldComponent>
                    <MudGrid>
                        <MudItem xs="6">
                            <PasswordFieldComponent @bind-Value="_newPassword" Label="New password" Variant="Variant.Outlined" Class="my-6"></PasswordFieldComponent>
                        </MudItem>
                        <MudItem xs="6">
                            <PasswordFieldComponent @bind-Value="_newPassword2" Label="Repeat new password" Variant="Variant.Outlined" Class="my-6"></PasswordFieldComponent>
                        </MudItem>
                    </MudGrid>
                    <MudButton OnClick="ChangePasswordAsync" Class="my-6" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large">Change password</MudButton>
                </MudTabPanel>
            </MudTabs>
        </MudItem>
    </MudGrid>
}

@code {
    private Identity? _identity;
    private MyProfile? _user;
    private List<DeviceInfo> _myDevices = new();

    private string _oldPassword = string.Empty;
    private string _newPassword = string.Empty;
    private string _newPassword2 = string.Empty;

    private readonly List<string> _errors = new();

    protected override async Task OnInitializedAsync()
    {
        _identity = await Storage.GetIdentityAsync();

        var id = _identity?.User?.Id;

        if (id != null)
        {
            var userResponse = await MyAccountClient.MyProfileGetAsync();
            if (userResponse.IsSuccessful)
                _user = await userResponse.ReadPayloadAsync();
            var myDevicesResponse = await MyAccountClient.MyDevicesGetAsync();
            if (myDevicesResponse.IsSuccessful)
                _myDevices = (await myDevicesResponse.ReadPayloadAsync())!.ToList();
        }
    }

    private async Task ChangePasswordAsync()
    {
        var newPassword = _newPassword;
        var newPassword2 = _newPassword2;
        var oldPassword = _oldPassword;

        _newPassword = string.Empty;
        _newPassword2 = string.Empty;
        _oldPassword = string.Empty;

        _errors.Clear();

        if (newPassword != newPassword2)
        {
            _errors.Add("Passwords do not match.");
            return;
        }

        var response = await MyAccountClient.ChangeMyPasswordAsync(new ChangeMyPasswordInput
        {
            OldPassword = oldPassword,
            NewPassword = newPassword
        });

        if (!response.IsSuccessful)
        {
            var errors = await response.ReadErrorsAsync();
            switch (response.StatusCode)
            {
                case HttpStatusCode.Unauthorized:
                    _errors.Add("You are not authorized.");
                    break;
                default:
                    _errors.AddRange(errors.Errors?.Select(e => e.Message ?? "") ?? Array.Empty<string>());

                    if (!_errors.Any())
                        _errors.Add(response.StatusCode.ToString());
                    break;
            }

            return;
        }

        Snackbar.Add("Password changed.", Severity.Success);
    }

}