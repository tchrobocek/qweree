@page "/login"
@using Qweree.WebApplication.Infrastructure.Authentication
@using Qweree.Sdk.Http.Exceptions
@using Qweree.WebApplication.Infrastructure.Browser
@using Qweree.Authentication.Sdk.Account
@using System.Security.Claims
@using Qweree.Authentication.Sdk.Session
@layout EmptyLayout
@inject AuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject MyAccountClient MyAccountClient;
@inject LocalUserStorage LocalUserStorage;


<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
    <div class="d-flex flex-column mud-width-full">
        <MudPaper Elevation="25" Class="pa-8" Width="100%" MaxWidth="500px">
            <ErrorsComponent Error="@_authMessage" />
            <MudText Typo="Typo.h4" GutterBottom="true">Qweree</MudText>
            <MudTextField T="string" @bind-Value="_username" Label="Username" Variant="Variant.Outlined" Class="my-6"></MudTextField>
            <PasswordFieldComponent @bind-Value="_password" Label="Password" Variant="Variant.Outlined"/>
            <MudButton Class="mt-6" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await LoginAsync()" Size="Size.Large" FullWidth="true">Sign In</MudButton>
        </MudPaper>
    </div>
</MudContainer>
@code {
    private string _authMessage = string.Empty;
    private string _username = string.Empty;
    private string _password = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var response = await MyAccountClient.MyProfileGetAsync();
        if (response.IsSuccessful)
        {
            var payload = await response.ReadPayloadAsync();
            var claims = payload!.SelectMany(kv => kv.Value.Select(v => new Claim(kv.Key, v)));
            var principal = new ClaimsPrincipal(new ClaimsIdentity(claims, "qweree"));
            var identity = IdentityMapper.ToIdentity(principal);
            await LocalUserStorage.SetUserAsync(identity);
            NavigationManager.NavigateTo("/home", true);
        }
    }

    private async Task LoginAsync()
    {
        _authMessage = string.Empty;
        try
        {
            await AuthenticationService.AuthenticateAsync(_username, _password);
            NavigationManager.NavigateTo("/", true);
        }
        catch (ClientErrorErrorException)
        {
            _authMessage = "Wrong username or password.";
        }
        catch (Exception)
        {
            _authMessage = "System error.";
        }
        finally
        {
            _password = string.Empty;
        }
    }
}