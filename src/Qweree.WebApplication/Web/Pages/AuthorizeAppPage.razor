@page "/authorize-app"
@using Microsoft.AspNetCore.Authorization
@using Qweree.Authentication.Sdk.Account
@using Qweree.Authentication.Sdk.Identity
@using Qweree.Utils
@using Qweree.WebApplication.Infrastructure.Authentication

@layout EmptyLayout
@attribute [Authorize]

@inject MyAccountClient MyAccountClient
@inject NavigationManager NavigationManager
@inject AuthenticationService AuthenticationService

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
    <div class="d-flex flex-column mud-width-full">
        <MudPaper Elevation="25" Class="pa-8" Width="100%" MaxWidth="500px">
            <MudText Typo="Typo.h4" GutterBottom="true">Qweree</MudText>
            <MudText Typo="Typo.h6" GutterBottom="true">Application @_client?.ApplicationName is requesting permissions to login.</MudText>
            <MudCheckBox Class="mt-6" Disabled T="bool" Checked="true">@_client?.ApplicationName will see your name and username</MudCheckBox>
            <MudCheckBox Disabled T="bool" Checked="true">@_client?.ApplicationName will see your email</MudCheckBox>
            <MudCheckBox Disabled T="bool" Checked="true">@_client?.ApplicationName will see your roles</MudCheckBox>
            <MudButton OnClick="AgreeAsync" Class="mt-6" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true">Agree</MudButton>
            <MudButton OnClick="Cancel" Class="mt-6" Variant="Variant.Filled" Size="Size.Large" FullWidth="true">Cancel</MudButton>
        </MudPaper>
    </div>
</MudContainer>
@code {
    private AuthClient? _client;

    [Parameter]
    [SupplyParameterFromQuery(Name = "client_id")]
    public string? ClientId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "redirect_uri")]
    public string? RedirectUri { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "state")]
    public string? State { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "logout")]
    public bool? Logout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(ClientId) || string.IsNullOrWhiteSpace(RedirectUri))
            NavigationManager.NavigateTo("/");

        var response = await MyAccountClient.ApplicationConsentInfoGetAsync(ClientId ?? string.Empty);

        if (!response.IsSuccessful)
            NavigationManager.NavigateTo("/");

        _client = await response.ReadPayloadAsync();
    }

    private async Task AgreeAsync()
    {
        var response = await MyAccountClient.ApplicationConsentAsync(ClientId ?? string.Empty, RedirectUri ?? string.Empty);

        var redirect = RedirectUri;
        if (response.IsSuccessful && redirect is not null)
        {
            var payload = await response.ReadPayloadAsync(JsonUtils.SnakeCaseNamingPolicy);
            var expiresIn = payload?.ExpiresAt - DateTime.UtcNow;
            redirect += $"?access_token={payload?.AccessToken}&token_type=Bearer&expires_in={(int)(expiresIn?.TotalSeconds ?? 0)}&state={State}";

            if (Logout ?? false)
                await AuthenticationService.LogoutAsync();
        }

        NavigationManager.NavigateTo(redirect ?? "/", true);
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo(RedirectUri ?? "/");
    }
}